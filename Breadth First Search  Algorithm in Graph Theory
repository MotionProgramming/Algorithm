#include <bits/stdc++.h> 
using namespace std;

typedef vector<int> vi; 
map<int, vi> adj; // Graph representation (adjacency list)
map<int, bool> visited; // Track visited nodes

#define PB push_back 
#define endl '\n' 
#define optimize() ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); 

void edge(int u, int v) {
    adj[u].PB(v); // Add edge u->v
    adj[v].PB(u); // Add edge v->u (undirected)
}

void BFS(int start) {
    queue<int> q; // Queue for BFS
    q.push(start); // Push starting node
    visited[start] = true; // Mark start as visited
    
    while (!q.empty()) { 
        cout << q.front() << " "; // Print node
        for (auto s : adj[q.front()]) { 
            if (!visited[s]) { // If not visited
                visited[s] = true; // Mark as visited
                q.push(s); // Push to queue
            }
        }
        q.pop(); // Remove processed node
    }
}

void solve() {
    int n, u, v, start; 
    cin >> n; 
    cout << "Enter the number of edge: " << n << endl; 
    
    for (int i = 0; i < n; i++) {
        cin >> u >> v; 
        edge(u, v); 
    }
    
    cin >> start; // Starting node
    cout << "BFS starting from node " << start << ": "; 
    BFS(start); // Perform BFS
}

int main() {
    optimize(); 
    solve(); 
    return 0; 
}
