#include <bits/stdc++.h>  
using namespace std;  

typedef vector<int> vi;  
map<int, vi> adj; // Adjacency list (graph representation)
map<int, bool> visited; 

#define PB push_back  
#define endl '\n'  
#define optimize() ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);  

void edge(int u, int v) {  
    adj[u].PB(v); 
    adj[v].PB(u); 
}  

// Recursive DFS function 
void DFS(int start) { 
    visited[start] = true;  // Mark the node as visited
    cout << start << " "; // Print the current node

    for (auto x : adj[start]) {  // Loop through all neighbors of the current node
        if (!visited[x]) {  // If the neighbor has not been visited
            DFS(x);  // Recurse with the unvisited neighbor
        } 
    } 
}
void DFS(int start) { 
    stack<int> s; 
    // Create a stack to store nodes to visit.
    s.push(start); 
    // Push the start node onto the stack.
    visited[start] = true; 
    // Mark the start node as visited.

    while (!s.empty()) { 
        int temp = s.top(); 
        // Get the top node from the stack.
        cout << temp << " "; 
        // Print the current node.
        s.pop(); 
        // Remove the node from the stack.
        
        for (auto x : adj[temp]) { 
            // Iterate through adjacent nodes of the current node.
            if (!visited[x]) { 
                // If the neighbor isn't visited yet,
                visited[x] = true; 
                // Mark it as visited.
                s.push(x); 
                // Push the neighbor onto the stack.
            } 
        } 
    } 
}
void solve() {  
    int n, u, v, start;  
    cin >> n;  
    cout << "Enter the number of edges: " << n << endl;  
    
    for (int i = 0; i < n; i++) {  
        cin >> u >> v;  
        edge(u, v);  
    }  
    
    cin >> start;  
    cout << "DFS starting from node " << start << ": ";  
    DFS(start);  
    cout << endl; 
}  

int main() {  
    optimize();  
    solve();  
    return 0;  
}  
