#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

/*binary search working array base and bisection working function base*/
/*The bisection method works directly with values from a function,
and array vlalue stores them in a binary search*/

/*bisection method requires a  function, a search range [l, r],and a target value.
It finds the lower bound where f(x) â‰¥ or >= target,ensuring the target exists within the range.*/

/* Binary search to find the smallest x such that f(x) >= target,
where f(x) = ax^2 + bx + c */

#define optimize()ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
ll a, b, c, target;
ll calc(ll x)
{
    return (a * x * x) + (b * x) + c;
}

int main()
{
    optimize();

    ll l = 0, r = 2e5;
    ll ans = -1;

    cin >> a >> b >> c >> target;

    while (l <= r)
    {
        ll mid = (l + r) / 2;
        cout << "l =" << l << ",r =" << r << ",mid =" << mid << ", calc = " << calc(mid) << endl;
        if (calc(mid) >= target)
        {
            ans = mid;
            r = mid - 1;
        }
        else
        {
            l = mid + 1;
        }
    }
    cout << ans << endl;
    return 0;
}
