#include<bits/stdc++.h>

using namespace std;

// Normal method for prime number checking
void solve() {
    int t;
    cin >> t;  
    
    while(t--) {  
        int n;
        cin >> n;  
        int cnt = 0;  

        // Check if the number is 0 or 1 (not prime)
        if (n == 0 || n == 1) {
            cnt = 1;  // Set cnt to 1 if n is not prime
        } else {
            for (int i = 2; i <= sqrt(n); i++) {
                if (n % i == 0) {  
                    cnt = 1;  // Mark cnt as 1 (not prime)
                    break;  // Exit the loop since we found a divisor
                }
            }
        }

        // Output whether the number is prime or not
        if (cnt == 0) {
            cout << n << " is Prime" << endl;  
        } else {
            cout << n << " is Not prime" << endl; 
        }
    }
}

/*
Time Complexity of solve():
- The loop runs for t test cases.
- For each test case, it checks divisibility from 2 to sqrt(n), which gives a complexity of O(sqrt(n)) for each test case.
- Overall time complexity for t test cases is O(t * sqrt(n)).
*/

// Sieve of Eratosthenes algorithm to find primes up to n
void sieve() {
    int n;
    cin >> n; 

    vector<bool> p(n + 1, true);  
    p[0] = p[1] = false;  // 0 and 1 are not prime numbers

    // Sieve of Eratosthenes to mark non-prime numbers
    for (int i = 2; i * i <= n; i++) {  // Loop through numbers from 2 to sqrt(n)
        if (p[i]) {  // If i is prime
            for (int j = i * i; j <= n; j += i) {  // Mark all multiples of i as non-prime
                p[j] = false;  // Mark multiples of i as non-prime
            }
        }
    }

    // Output all primes from n to 2 in descending order
    for (int l = n; l >= 2; l--) {
        if (p[l]) {  // If l is prime
            cout << l << " ";  
        }
    }
    cout << endl;  
}

/*
Time Complexity of sieve():
- The outer loop runs from 2 to sqrt(n), which gives a complexity of O(sqrt(n)).
- The inner loop iterates through the multiples of each prime, and across all primes, the total time complexity is O(n log log n).
- Overall time complexity of the Sieve of Eratosthenes is O(n log log n).
*/

int main() {
    solve();  
    sieve();  
   return 0 
}
